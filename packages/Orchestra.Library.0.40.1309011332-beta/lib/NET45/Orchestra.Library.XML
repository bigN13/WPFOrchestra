<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orchestra.Library</name>
    </assembly>
    <members>
        <member name="T:Orchestra.Controls.BindableLayoutDocument">
            <summary>
            Bindable implementation of the <see cref="T:Xceed.Wpf.AvalonDock.Layout.LayoutDocument"/> which automatically binds
            the title.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.BindableLayoutDocument.#ctor(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Controls.BindableLayoutDocument"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="tag">The tag.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Controls.BindableLayoutDocument.OnClosed">
            <summary>
            Called when the document is closed.
            </summary>
        </member>
        <member name="T:Orchestra.AvalonDockHelper">
            <summary>
            Helper class for avalon dock.
            </summary>
        </member>
        <member name="F:Orchestra.AvalonDockHelper.DockingManager">
            <summary>
            Docking manager reference.
            </summary>
        </member>
        <member name="F:Orchestra.AvalonDockHelper.LayoutDocumentPane">
            <summary>
            The layout document pane.
            </summary>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Orchestra.AvalonDockHelper"/> class. 
            </summary>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.FindDocument(System.Type,System.Object)">
            <summary>
            Gets the document.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="tag">The tag.</param>
            <returns>The found document or <c>null</c> if no document was found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.ActivateDocument(Xceed.Wpf.AvalonDock.Layout.LayoutDocument)">
            <summary>
            Activates the document in the docking manager, which makes it the active document.
            </summary>
            <param name="document">The document.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.CreateDocument(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Creates the document.
            </summary>
            <param name="view">The view.</param>
            <param name="tag">The tag.</param>
            <returns>The created layout document.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.WrapViewInLayoutDocument(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Wraps the view in a layout document.
            </summary>
            <param name="view">The view.</param>
            <param name="tag">The tag.</param>
            <returns>A wrapped layout document.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.OnDockingManagerDocumentClosed(System.Object,Xceed.Wpf.AvalonDock.DocumentClosedEventArgs)">
            <summary>
            Called when the docking manager has just closed a document.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xceed.Wpf.AvalonDock.DocumentClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Orchestra.AvalonDockHelper.CloseDocument(Xceed.Wpf.AvalonDock.Layout.LayoutDocument)">
            <summary>
            Closes the document.
            </summary>
            <param name="document">The document.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Orchestra.AvalonDockHelper.RegionManager">
            <summary>
            Gets the region manager.
            </summary>
        </member>
        <member name="T:Orchestra.FluentRibbonHelper">
            <summary>
            Helper class for the <see cref="T:Fluent.Ribbon"/> control.
            </summary>
        </member>
        <member name="F:Orchestra.FluentRibbonHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.SelectTabItem(Fluent.Ribbon,System.String)">
            <summary>
            Selects the tab item in the ribbon. If the tab cannot be found, the first tab will be
            selected.
            </summary>
            <param name="ribbon">The ribbon.</param>
            <param name="header">The header.</param>
            <returns>The selected ribbon tab item.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="ribbon"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.EnsureContextualTabGroup(Fluent.Ribbon,System.String)">
            <summary>
            Ensures that a contextual tab item group with the specified header exists.
            </summary>
            <param name="ribbon">The ribbon.</param>
            <param name="header">The header.</param>
            <returns>The existing or newly created <see cref="T:Fluent.RibbonTabItem"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="ribbon"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.EnsureTabItem(Fluent.Ribbon,System.String)">
            <summary>
            Ensures that a tab item with the specified header exists.
            </summary>
            <param name="ribbon">The ribbon.</param>
            <param name="header">The header.</param>
            <returns>The existing or newly created <see cref="T:Fluent.RibbonTabItem"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="ribbon"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.EnsureContextualTabItem(Fluent.Ribbon,System.String,System.String)">
            <summary>
            Ensures that a contextual tab item with the specified header exists.
            </summary>
            <param name="ribbon">The ribbon.</param>
            <param name="header">The header.</param>
            <param name="contextualTabGroupHeader">The contextual tab group header.</param>
            <returns>The existing or newly created <see cref="T:Fluent.RibbonTabItem"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="ribbon"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="contextualTabGroupHeader"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.EnsureGroupBox(Fluent.RibbonTabItem,System.String)">
            <summary>
            Ensures that a groupbox with the specified header exists.
            </summary>
            <param name="tabItem">The tab item.</param>
            <param name="header">The header.</param>
            <returns>The existing or newlhy created <see cref="T:Fluent.RibbonGroupBox"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="tabItem"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddRibbonItem(System.Windows.Controls.ItemsControl,Orchestra.Models.IRibbonItem)">
            <summary>
            Adds the ribbon item to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="ribbonItem">The ribbon item.</param>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddButton(System.Windows.Controls.ItemsControl,System.String,System.String,System.String,System.Windows.Input.ICommand)">
            <summary>
            Adds a new button to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <param name="command">The command.</param>
            <returns>The created button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref header="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddButton(System.Windows.Controls.ItemsControl,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Adds a new button to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <param name="commandName">The command name.</param>
            <param name="commandSource">The command source, can be <c>null</c> to respect the data context.</param>
            <returns>The created button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.CreateButtonWithoutCommandBinding(System.Windows.Controls.ItemsControl,System.String,System.String,System.String)">
            <summary>
            Creates the button without command binding.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <returns>Button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddGallery(System.Windows.Controls.ItemsControl,System.Collections.Generic.IEnumerable{Orchestra.Models.IRibbonItem},System.Windows.Controls.Orientation,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Windows.Style)">
            <summary>
            Adds a new gallery to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="items">The list of items.</param>
            <param name="orientation">The gallery orientation.</param>
            <param name="selectable">if set to <c>true</c> is selectable.</param>
            <param name="itemWidth">Width of the item.</param>
            <param name="itemHeight">Height of the item.</param>
            <param name="minItemsInRow">The min items in row.</param>
            <param name="maxItemsInRow">The max items in row.</param>
            <param name="itemContainerStyle">The item container style.</param>
            <returns>
            The created gallery.
            </returns>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddSplitButton(System.Windows.Controls.ItemsControl,System.Collections.Generic.List{Orchestra.Models.IRibbonItem},System.String,System.String,System.String,System.Windows.Input.ICommand)">
            <summary>
            Adds a new button to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="items">The nested items.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <param name="command">The command.</param>
            <returns>The created split button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref header="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddSplitButton(System.Windows.Controls.ItemsControl,System.Collections.Generic.List{Orchestra.Models.IRibbonItem},System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Adds a new button to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="items">The nested items.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <param name="commandName">The command name.</param>
            <param name="commandSource">The command source, can be <c>null</c> to respect the data context.</param>
            <returns>The created split button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.CreateSplitButtonWithoutCommandBinding(System.Windows.Controls.ItemsControl,System.Collections.Generic.List{Orchestra.Models.IRibbonItem},System.String,System.String,System.String)">
            <summary>
            Creates the button without command binding.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="items">The nested items.</param>
            <param name="header">The header.</param>
            <param name="icon">The icon.</param>
            <param name="largeIcon">The large icon.</param>
            <returns>Split button.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddComboBox(System.Windows.Controls.ItemsControl,System.String,System.String,System.String,System.Object)">
            <summary>
            Adds a new combobox to the specified <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <param name="itemsSource">The items source collection.</param>
            <param name="selectedItem">The selected item.</param>
            <param name="bindingSource">The binding source.</param>
            <returns>
            The created <see cref="T:Fluent.ComboBox"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.AddContentControl(System.Windows.Controls.ItemsControl,System.String,System.Windows.DataTemplate)">
            <summary>
            Adds the content control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <param name="template">The DataTemplate for the ContentTemplate of the ContentControl.</param>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.CreateComboBoxWithoutBinding(System.Windows.Controls.ItemsControl,System.String)">
            <summary>
            Creates the combobox without command binding.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="header">The header.</param>
            <returns>
            Button.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref header="itemsControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref header="header"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.ApplyLayout(Fluent.RibbonGroupBox,System.Windows.Controls.Control,Orchestra.Models.IRibbonItemLayout)">
            <summary>
            Applies the layout.
            </summary>
            <param name="groupBox">The group box.</param>
            <param name="control">The control.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:Orchestra.FluentRibbonHelper.RemoveItem(Fluent.Ribbon,Orchestra.Models.IRibbonControl)">
            <summary>
            Removes the specified <see cref="T:Orchestra.Models.IRibbonControl"/> from the ribbon.
            </summary>
            <param name="ribbon">The ribbon.</param>
            <param name="ribbonControl">The ribbon item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbon"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonControl"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Orchestra.Layout.LayoutInitializer">
            <summary>
            Layout initializer for Orchestra.
            </summary>
        </member>
        <member name="M:Orchestra.Layout.LayoutInitializer.BeforeInsertAnchorable(Xceed.Wpf.AvalonDock.Layout.LayoutRoot,Xceed.Wpf.AvalonDock.Layout.LayoutAnchorable,Xceed.Wpf.AvalonDock.Layout.ILayoutContainer)">
            <summary>
            Befores the insert anchorable.
            </summary>
            <param name="layout">The layout.</param>
            <param name="anchorableToShow">The anchorable to show.</param>
            <param name="destinationContainer">The destination container.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Orchestra.Layout.LayoutInitializer.AfterInsertAnchorable(Xceed.Wpf.AvalonDock.Layout.LayoutRoot,Xceed.Wpf.AvalonDock.Layout.LayoutAnchorable)">
            <summary>
            Called after an anchorable item is inserted.
            </summary>
            <param name="layout">The layout.</param>
            <param name="anchorableShown">The anchorable shown.</param>
        </member>
        <member name="M:Orchestra.Layout.LayoutInitializer.BeforeInsertDocument(Xceed.Wpf.AvalonDock.Layout.LayoutRoot,Xceed.Wpf.AvalonDock.Layout.LayoutDocument,Xceed.Wpf.AvalonDock.Layout.ILayoutContainer)">
            <summary>
            The before insert document.
            </summary>
            <param name="layout">The layout.</param>
            <param name="anchorableToShow">The anchorable to show.</param>
            <param name="destinationContainer">The destination container.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Orchestra.Layout.LayoutInitializer.AfterInsertDocument(Xceed.Wpf.AvalonDock.Layout.LayoutRoot,Xceed.Wpf.AvalonDock.Layout.LayoutDocument)">
            <summary>
            The after insert document.
            </summary>
            <param name="layout">The layout.</param>
            <param name="anchorableShown">The anchorable shown.</param>
        </member>
        <member name="M:Orchestra.Layout.LayoutInitializer.InsertAnchorable(Xceed.Wpf.AvalonDock.Layout.LayoutRoot,Xceed.Wpf.AvalonDock.Layout.LayoutAnchorable,Xceed.Wpf.AvalonDock.Layout.ILayoutContainer)">
            <summary>
            Inserts the anchorable.
            </summary>
            <param name="layout">The layout.</param>
            <param name="anchorableToShow">The anchorable to show.</param>
            <param name="destinationContainer">The destination container.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:Orchestra.Models.IRibbonButton">
            <summary>
            Provides a ribbon button methods and properties.
            </summary>
        </member>
        <member name="T:Orchestra.Models.IRibbonControl">
            <summary>
            Provides a common ribbon item methods and properties.
            </summary>
        </member>
        <member name="T:Orchestra.Models.IRibbonItem">
            <summary>
            Represents a root interface for all ribbon items.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.ContextualTabItemGroupName">
            <summary>
            Gets or sets the name of the contextual tab item group.
            <para/>
            This value is only used when <see cref="P:Orchestra.Models.IRibbonControl.Context"/> is set to <see cref="F:Orchestra.Models.RibbonContext.View"/>.
            </summary>
            <value>The name of the contextual tab item group.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.TabItemHeader">
            <summary>
            Gets the tab item header.
            </summary>
            <value>The tab item header.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.GroupBoxHeader">
            <summary>
            Gets the group box header.
            </summary>
            <value>The group box header.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.ItemHeader">
            <summary>
            Gets the item header.
            </summary>
            <value>The item header.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.OnlyShowWhenTabIsActivated">
            <summary>
            Gets a value indiciating whether this ribbon item should only be shown when 
            the tab is actually activated.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.Behavior">
            <summary>
            Gets or sets the behavior.
            </summary>
            <value>The behavior.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.Layout">
            <summary>
            Gets the ribbon item layout.
            </summary>
            <value>
            The ribbon item layout.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.Style">
            <summary>
            Gets the ribbon item style.
            </summary>
            <value>
            The ribbon item style.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonControl.ToolTip">
            <summary>
            Gets or sets the ribbon item tooltip.
            </summary>
            <value>
            The ribbon item tooltip.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonButton.ItemImage">
            <summary>
            Gets or sets the item image.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonButton.Command">
            <summary>
            Gets the command.
            <para/>
            If this command is set, it will be used directly. Otherwise a binding to the active document will be created 
            using the <see cref="P:Orchestra.Models.IRibbonButton.CommandName"/> property.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Orchestra.Models.IRibbonButton.CommandName">
            <summary>
            Gets the name of the command.
            <para/>
            The <see cref="P:Orchestra.Models.IRibbonButton.Command"/> property always is used first. If that value is <c>null</c>, this value will be used
            to bind the command to the active document.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="T:Orchestra.Models.IRibbonComboBox">
            <summary>
            Provides a ribbon combo box methods and properties.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonComboBox.ItemsSource">
            <summary>
            Gets the items source.
            </summary>
            <value>
            The items source.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonComboBox.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>
            The selected item.
            </value>
        </member>
        <member name="T:Orchestra.Models.RibbonContext">
            <summary>
            The ribbon context.
            </summary>
        </member>
        <member name="F:Orchestra.Models.RibbonContext.Global">
            <summary>
            Global, which means always visible.
            </summary>
        </member>
        <member name="F:Orchestra.Models.RibbonContext.View">
            <summary>
            View, which means only when the view it is registered with is visible.
            </summary>
        </member>
        <member name="T:Orchestra.Models.RibbonBehavior">
            <summary>
            The ribbon behaviors.
            </summary>
        </member>
        <member name="F:Orchestra.Models.RibbonBehavior.None">
            <summary>
            No specific behavior.
            </summary>
        </member>
        <member name="F:Orchestra.Models.RibbonBehavior.ActivateTab">
            <summary>
            Activates the tab.
            </summary>
        </member>
        <member name="T:Orchestra.Models.IRibbonGallery">
            <summary>
            Provides a ribbon gallery methods and properties.
            </summary>
        </member>
        <member name="T:Orchestra.Models.IRibbonItemsCollection">
            <summary>
            Provides a ribbon items collection methods and properties.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonItemsCollection.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
            <value>
            The items collection.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonItemsCollection.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
            <value>
            The item container style.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.Orientation">
            <summary>
            Gets or sets the orientation of gallery.
            </summary>
            <value>
            The orientation of gallery.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.Selectable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Orchestra.Models.IRibbonItem"/> is selectable.
            </summary>
            <value>
              <c>true</c> if selectable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.ItemWidth">
            <summary>
            Gets or sets the width of the item.
            </summary>
            <value>
            The width of the item.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.ItemHeight">
            <summary>
            Gets or sets the height of the item.
            </summary>
            <value>
            The height of the item.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.MinItemsInRow">
            <summary>
            Gets or sets the min items in row.
            </summary>
            <value>
            The min items in row.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonGallery.MaxItemsInRow">
            <summary>
            Gets or sets the max items in row.
            </summary>
            <value>
            The max items in row.
            </value>
        </member>
        <member name="T:Orchestra.Models.IRibbonItemLayout">
            <summary>
            Provides information about the ribbon item layout.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonItemLayout.Width">
            <summary>
            Gets the width of the ribbon item.
            </summary>
            <value>
            The width of the ribbon item.
            </value>
        </member>
        <member name="T:Orchestra.Models.IRibbonSplitButton">
            <summary>
            Provides a ribbon split button methods and properties.
            </summary>
        </member>
        <member name="T:Orchestra.Models.IRibbonToolTip">
            <summary>
            Provides a ribbon tooltip methods and properties.
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonToolTip.Title">
            <summary>
            Gets or sets the ribbon tooltip title.
            </summary>
            <value>
            The ribbon tooltip title.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonToolTip.Text">
            <summary>
            Gets or sets the ribbon tooltip text.
            </summary>
            <value>
            The ribbon tooltip text.
            </value>
        </member>
        <member name="P:Orchestra.Models.IRibbonToolTip.Width">
            <summary>
            Gets or sets the ribbon tooltip width.
            </summary>
            <value>
            The ribbon tooltip width.
            </value>
        </member>
        <member name="T:Orchestra.Models.RibbonButton">
            <summary>
            Represents a ribbon button
            </summary>
        </member>
        <member name="T:Orchestra.Models.RibbonControlBase">
            <summary>
            Defines a ribbon item base class
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonControlBase.#ctor(System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Prevents a default instance of the <see cref="T:Orchestra.Models.RibbonControlBase"/> class from being created.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="tabItemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="groupBoxHeader"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Models.RibbonControlBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.ContextualTabItemGroupName">
            <summary>
            Gets or sets the name of the contextual tab item group.
            <para/>
            This value is only used when <see cref="P:Orchestra.Models.RibbonControlBase.Context"/> is set to <see cref="F:Orchestra.Models.RibbonContext.View"/>.
            </summary>
            <value>The name of the contextual tab item group.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.TabItemHeader">
            <summary>
            Gets the tab item header.
            </summary>
            <value>The tab item header.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.GroupBoxHeader">
            <summary>
            Gets the group box header.
            </summary>
            <value>The group box header.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.ItemHeader">
            <summary>
            Gets the item header.
            </summary>
            <value>The item header.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.OnlyShowWhenTabIsActivated">
            <summary>
            Gets a value indiciating whether this ribbon item should only be shown when 
            the tab is actually activated.
            </summary>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.Behavior">
            <summary>
            Gets or sets the behavior.
            </summary>
            <value>The behavior.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.Layout">
            <summary>
            Gets or sets the ribbon item layout.
            </summary>
            <value>
            The ribbon item layout.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.Style">
            <summary>
            Gets or sets the ribbon item style.
            </summary>
            <value>
            The ribbon item style.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonControlBase.ToolTip">
            <summary>
            Gets or sets the ribbon item tool tip.
            </summary>
            <value>
            The ribbon item tool tip.
            </value>
        </member>
        <member name="M:Orchestra.Models.RibbonButton.#ctor(System.String,System.String,System.String,System.Windows.Input.ICommand,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonButton"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="command">The command.</param>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="tabItemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="groupBoxHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="itemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Models.RibbonButton.#ctor(System.String,System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonButton"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="commandName">The name of the command.</param>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="tabItemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="groupBoxHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="itemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Orchestra.Models.RibbonButton.ItemImage">
            <summary>
            Gets or sets the item image.
            </summary>
            <value>The item image.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonButton.CommandName">
            <summary>
            Gets the name of the command.
            <para/>
            The <see cref="P:Orchestra.Models.RibbonButton.Command"/> property always is used first. If that value is <c>null</c>, this value will be used
            to bind the command to the active document.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="P:Orchestra.Models.RibbonButton.Command">
            <summary>
            Gets the command.
            <para/>
            If this command is set, it will be used directly. Otherwise a binding to the active document will be created
            using the <see cref="P:Orchestra.Models.RibbonButton.CommandName"/> property.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Orchestra.Models.RibbonComboBox">
            <summary>
            Represents a ribbon combo box
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonComboBox.#ctor(System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonComboBox"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="P:Orchestra.Models.RibbonComboBox.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>
            The items source.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>
            The selected item.
            </value>
        </member>
        <member name="T:Orchestra.Models.IRibbonContentControl">
            <summary>
            Interface for RibbonItem with the ability to show dynamic content
            </summary>
        </member>
        <member name="P:Orchestra.Models.IRibbonContentControl.ContentTemplate">
            <summary>
            Gets or sets ContentTemplate for the custom content.
            </summary>
            <value>The item image.</value>
        </member>
        <member name="T:Orchestra.Models.RibbonContentControl">
            <summary>
            RibbonItem with the ability to show dynamic content.
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonContentControl.#ctor(System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonContentControl"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="P:Orchestra.Models.RibbonContentControl.ContentTemplate">
            <summary>
            Gets or sets ContentTemplate for the custom content.
            </summary>
            <value>The item image.</value>
        </member>
        <member name="T:Orchestra.Models.RibbonGallery">
            <summary>
            Represents a ribbon gallery.
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonGallery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonGallery"/> class.
            </summary>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
            <value>
            The items collection.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
            <value>
            The item container style.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.Orientation">
            <summary>
            Gets or sets the orientation of gallery.
            </summary>
            <value>
            The orientation of gallery.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.Selectable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Orchestra.Models.IRibbonItem"/> is selectable.
            </summary>
            <value>
              <c>true</c> if selectable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.ItemWidth">
            <summary>
            Gets or sets the width of the item.
            </summary>
            <value>
            The width of the item.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.ItemHeight">
            <summary>
            Gets or sets the height of the item.
            </summary>
            <value>
            The height of the item.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.MinItemsInRow">
            <summary>
            Gets or sets the min items in row.
            </summary>
            <value>
            The min items in row.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonGallery.MaxItemsInRow">
            <summary>
            Gets or sets the max items in row.
            </summary>
            <value>
            The max items in row.
            </value>
        </member>
        <member name="T:Orchestra.Models.RibbonItem">
            <summary>
            Implementation of the <see cref="T:Orchestra.Models.IRibbonButton"/>.
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonItem.#ctor(System.String,System.String,System.String,System.Windows.Input.ICommand,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonItem"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="command">The command.</param>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="tabItemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="groupBoxHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="itemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Models.RibbonItem.#ctor(System.String,System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonItem"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="commandName">The name of the command.</param>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="tabItemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="groupBoxHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="itemHeader"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Orchestra.Models.RibbonItemLayout">
            <summary>
            Defines a ribbon item layout.
            </summary>
        </member>
        <member name="P:Orchestra.Models.RibbonItemLayout.Width">
            <summary>
            Gets the width of the ribbon item.
            </summary>
            <value>
            The width of the ribbon item.
            </value>
        </member>
        <member name="T:Orchestra.Models.RibbonSplitButton">
            <summary>
            Represents a ribbon split button
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonSplitButton.#ctor(System.String,System.String,System.String,System.Windows.Input.ICommand,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonSplitButton"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="command">The command.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Orchestra.Models.RibbonSplitButton.#ctor(System.String,System.String,System.String,System.String,Orchestra.Models.RibbonBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonSplitButton"/> class.
            </summary>
            <param name="tabItemHeader">The tab item header.</param>
            <param name="groupBoxHeader">The group box header.</param>
            <param name="itemHeader">The item header.</param>
            <param name="commandName">The name of the command.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="P:Orchestra.Models.RibbonSplitButton.Items">
            <summary>
            Gets or sets the gallery items.
            </summary>
            <value>
            The gallery items.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonSplitButton.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
            <value>
            The item container style.
            </value>
        </member>
        <member name="T:Orchestra.Models.RibbonToolTip">
            <summary>
            Represents a ribbon tooltip.
            </summary>
        </member>
        <member name="M:Orchestra.Models.RibbonToolTip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.RibbonToolTip"/> class.
            </summary>
        </member>
        <member name="P:Orchestra.Models.RibbonToolTip.Title">
            <summary>
            Gets or sets the ribbon tooltip title.
            </summary>
            <value>
            The ribbon tooltip title.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonToolTip.Text">
            <summary>
            Gets or sets the ribbon tooltip text.
            </summary>
            <value>
            The ribbon tooltip text.
            </value>
        </member>
        <member name="P:Orchestra.Models.RibbonToolTip.Width">
            <summary>
            Gets or sets the ribbon tooltip width.
            </summary>
            <value>
            The ribbon tooltip width.
            </value>
        </member>
        <member name="T:ModuleInitializer">
            <summary>
            Used by the ModuleInit. All code inside the Initialize method is ran as soon as the assembly is loaded.
            </summary>
        </member>
        <member name="M:ModuleInitializer.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:Orchestra.Modules.ModuleBase">
            <summary>
            Base class for all modules used by Orchestra.
            </summary>
        </member>
        <member name="F:Orchestra.Modules.ModuleBase.HomeRibbonTabName">
            <summary>
            The name of the home ribbon tab.
            </summary>
        </member>
        <member name="F:Orchestra.Modules.ModuleBase.ModulesDirectory">
            <summary>
            The modules directory name.
            </summary>
        </member>
        <member name="M:Orchestra.Modules.ModuleBase.GetLicenseUrl">
            <summary>
            Gets the license URL.
            <para />
            If this method returns an empty string, it is assumed the module has no license.
            </summary>
            <returns>The url of the license.</returns>
        </member>
        <member name="M:Orchestra.Modules.ModuleBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Modules.ModuleBase"/> class.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="moduleName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Modules.ModuleBase.InitializeRibbon(Orchestra.Services.IRibbonService)">
            <summary>
            Initializes the ribbon.
            <para />
            Use this method to hook up views to ribbon items.
            </summary>
            <param name="ribbonService">The ribbon service.</param>
        </member>
        <member name="T:Orchestra.Services.IOrchestraService">
            <summary>
            The orchestra service that allows communication with the shell.
            </summary>
        </member>
        <member name="M:Orchestra.Services.IOrchestraService.ShowDocument``1(System.Object)">
            <summary>
            Shows the document in the main shell.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Orchestra.Services.IOrchestraService.ShowDocument``1(``0,System.Object)">
            <summary>
            Shows the document in the main shell.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModel">The view model to show which will automatically be resolved to a view.</param>
            <param name="tag">The tag.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.IOrchestraService.CloseDocument(Catel.MVVM.IViewModel,System.Object)">
            <summary>
            Closes the document in the main shell with the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="tag">The tag.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.IOrchestraService.AddRibbonItem(Orchestra.Models.IRibbonItem)">
            <summary>
            Adds the specified ribbon item to the main ribbon.
            </summary>
            <param name="ribbonItem">The ribbon item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonItem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.IOrchestraService.RemoveRibbonItem(Orchestra.Models.IRibbonItem)">
            <summary>
            Removes the specified ribbon item to the main ribbon.
            <para/>
            This method will ignore calls when the item is not available in the ribbon.
            </summary>
            <param name="ribbonItem">The ribbon item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonItem"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Orchestra.Services.IOrchestraService.ShowDebuggingWindow">
            <summary>
            Gets or sets a value indicating whether to show the debug window.
            </summary>
            <value><c>true</c> if the debug window should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Orchestra.Services.IRibbonService">
            <summary>
            Interface definition of the ribbon service.
            </summary>
        </member>
        <member name="M:Orchestra.Services.IRibbonService.RegisterRibbonItem(Orchestra.Models.IRibbonControl)">
            <summary>
            Registers the specified ribbon item to the main ribbon.
            </summary>
            <param name="ribbonItem">The ribbon item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonItem"/> is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">The <c>Command</c> property of the <paramref name="ribbonItem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.IRibbonService.RegisterContextualRibbonItem``1(Orchestra.Models.IRibbonControl,System.String)">
            <summary>
            Registers the ribbon item bound to a specific view type.
            </summary>
            <typeparam name="TView">The type of the T view.</typeparam>
            <param name="ribbonItem">The ribbon item.</param>
            <param name="contextualTabGroupName">The contextual tab group name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonItem"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="contextualTabGroupName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Services.IRibbonService.RegisterContextualRibbonItem(System.Type,Orchestra.Models.IRibbonControl,System.String)">
            <summary>
            Registers the ribbon item bound to a specific view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="ribbonItem">The ribbon item.</param>
            <param name="contextualTabGroupName">The contextual tab group name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ribbonItem"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="contextualTabGroupName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Orchestra.Services.IStatusBarService">
            <summary>
            Class to modify the status bar.
            </summary>
        </member>
        <member name="M:Orchestra.Services.IStatusBarService.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="status"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Orchestra.Services.ServiceBase">
            <summary>
            Base class for all services in Orchestra.
            </summary>
        </member>
        <member name="M:Orchestra.Services.ServiceBase.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Orchestra.Services.ServiceBase.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>The service instance.</returns>
        </member>
        <member name="T:Orchestra.ViewModels.ViewModelBase">
            <summary>
            Base class for all view models in Orchestra. Additional functionality might be introduced in the future.
            </summary>
        </member>
        <member name="T:Orchestra.Views.DocumentView">
            <summary>
            Base class for all views that should be used as documents in Orchestra.
            <para />
            A developer is not forced to use this base class, but it is strongly recommended.
            </summary>
        </member>
        <member name="T:Orchestra.Views.IDocumentView">
            <summary>
            Interface defining a document view.
            </summary>
        </member>
        <member name="M:Orchestra.Views.IDocumentView.CloseDocument">
            <summary>
            Closes the document.
            </summary>
        </member>
        <member name="M:Orchestra.Views.DocumentView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.DocumentView"/> class. 
            </summary>
        </member>
        <member name="M:Orchestra.Views.DocumentView.CloseDocument">
            <summary>
            Closes the document.
            </summary>
        </member>
    </members>
</doc>
